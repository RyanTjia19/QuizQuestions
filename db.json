{
  "ComputerScience": [
    { "Simple": [
      { "id": 0, "Question": "What is an incomplete binary tree?", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "A parent node only have a right child node" },
         { "id": 1, "Answer": "Each parent node have two child nodes" },
         { "id": 2, "Answer": "A parent node only have a left child node" },
         { "id": 3, "Answer": "Both A and B" }
       ]},
      { "id": 1, "Question": "In python, how do you get the last element of an array that have a size of 5?", "Answer": 2,
       "Choices": [
         { "id": 0, "Answer": "array[-3]" },
         { "id": 1, "Answer": "array[0]" },
         { "id": 2, "Answer": "array[-1]" },
         { "id": 3, "Answer": "array[len(array)]" }
       ]},
      { "id": 2, "Question": "In a worst-case scenario, which of these Big O notation have the most complexity?", "Answer": 1,
       "Choices": [
         { "id": 0, "Answer": "O(n)" },
         { "id": 1, "Answer": "O(2^n)" },
         { "id": 2, "Answer": "O(1)" },
         { "id": 3, "Answer": "O(n^10)" }
       ]},
      { "id": 3, "Question": "Which of the following is the correct way to create a dictionary in C#?", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "Dictionary<string, string> example = new Dictionary<string, string>();" },
         { "id": 1, "Answer": "Dictionary example = new Hashtable();" },
         { "id": 2, "Answer": "example = {}" },
         { "id": 1, "Answer": "example[element] = sample" }
       ]},
      { "id": 4, "Question": "Which is a function expression in javascript?", "Answer": 3,
       "Choices": [
         { "id": 0, "Answer": "var expression = () =>" },
         { "id": 1, "Answer": "function expression()" },
         { "id": 2, "Answer": "var expression = 'function';" },
         { "id": 3, "Answer": "var expression = function()" }
       ]}
      ]
    },
    
    { "Narrative": [
      { "id": 0, "Question": "A program uses a for-loop to iterate through each element in an array of size N. What is the Big O notation in a worst-case scenario?", "Answer": 2,
       "Choices": [
         { "id": 0, "Answer": "O(1)" },
         { "id": 1, "Answer": "O(N^2)" },
         { "id": 2, "Answer": "O(N)" },
         { "id": 3, "Answer": "O(logN)" }
       ]},
      { "id": 1, "Question": "A java program have a line of code that divides a number by 0. What error will this cause?", "Answer": 3,
       "Choices": [
         { "id": 0, "Answer": "IncompatibleTypes" },
         { "id": 1, "Answer": "ArrayIndexOutOfBoundsException" },
         { "id": 2, "Answer": "NullPointerException" },
         { "id": 3, "Answer": "ArithmeticException" }
       ]},
       { "id": 2, "Question": "John wishes to create a database that stores a person's name, SSN, DOB, and occupation. Which of these should be a primary key?", "Answer": 1,
        "Choices": [
         { "id": 0, "Answer": "Name" },
         { "id": 1, "Answer": "SSN" },
         { "id": 2, "Answer": "DOB" },
         { "id": 3, "Answer": "Occupation" }
       ]}
      ]
    },
    
    { "Image": [
      { "id": 0, "Question": "What is the outcome?", "Image": "Image1.png", "Answer": 3,
        "Choices": [
         { "id": 0, "Answer": "5" },
         { "id": 1, "Answer": "0" },
         { "id": 2, "Answer": "20" },
         { "id": 3, "Answer": "10" }
       ]},
      { "id": 1, "Question": "What is the Big O notation?", "Image": "Image2.png", "Answer": 0,
        "Choices": [
         { "id": 0, "Answer": "O(N^2)" },
         { "id": 1, "Answer": "O(NlogN)" },
         { "id": 2, "Answer": "O(1)" },
         { "id": 3, "Answer": "O(N^3)" }
       ]},
      { "id": 2, "Question": "Given this BST, where will '15' be when inserted?", "Image": "Image3.png", "Answer": 0,
        "Choices": [
         { "id": 0, "Answer": "Left child node of 16" },
         { "id": 1, "Answer": "Left child node of 18" },
         { "id": 2, "Answer": "Right child node of 3" },
         { "id": 3, "Answer": "Left child node of 14" }
       ]},
      { "id": 3, "Question": "In python, what will be printed?", "Image": "Image4.png", "Answer": 2,
        "Choices": [
         { "id": 0, "Answer": "1 + 5 + hello" },
         { "id": 1, "Answer": "{x} + y + {z}" },
         { "id": 2, "Answer": "1 + y + 2" },
         { "id": 3, "Answer": "x + y + z" }
       ]}
      ]
    },

    { "TF": [
      { "id": 0, "Question": "A java expression statement must end with a semicolon", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "True" },
         { "id": 1, "Answer": "False" }
       ]},
       { "id": 1, "Question": "Max-heap is where the child node is greater than the parent node", "Answer": 1,
       "Choices": [
         { "id": 0, "Answer": "True" },
         { "id": 1, "Answer": "False" }
       ]},
       { "id": 2, "Question": "A set does not allow duplicates", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "True" },
         { "id": 1, "Answer": "False" }
       ]},
       { "id": 3, "Question": "A queue is 'First In First Out'", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "True" },
         { "id": 1, "Answer": "False" }
       ]},
       { "id": 4, "Question": "In python, 'else if' is a valid syntax", "Answer": 1,
       "Choices": [
         { "id": 0, "Answer": "True" },
         { "id": 1, "Answer": "False" }
       ]}
      ]
    },

    { "Lists": [
      { "id": 0, "Frag1": "In BST, the right child node is ", "Frag2": " left child node", "Answer": 0,
        "Choices": [
         { "id": 0, "Answer": "greater than" },
         { "id": 1, "Answer": "less than" }
       ]},
      { "id": 1, "Frag1": "O(", "Frag2": ") have the least complexity", "Answer": 3,
        "Choices": [
         { "id": 0, "Answer": "N" },
         { "id": 1, "Answer": "logN" },
         { "id": 2, "Answer": "N^3" },
         { "id": 3, "Answer": "1" }
       ]},
      { "id": 2, "Frag1": "The data structure ", "Frag2": " allows duplicate", "Answer": 1,
        "Choices": [
         { "id": 0, "Answer": "Set" },
         { "id": 1, "Answer": "List" },
         { "id": 2, "Answer": "Map" }
       ]}
      ]
    }

  ],

  "Math": [
  ]
}
